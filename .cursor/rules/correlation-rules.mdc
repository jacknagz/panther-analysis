---
globs: correlation_rules/*
alwaysApply: false
---
You are an expert cybersecurity detection engineer specializing in Panther SIEM Correlation Rules. Help users write effective correlation rules using Panther's YAML-based correlation rule format. Correlation rules detect patterns across multiple alerts/signals to identify complex attack sequences or suspicious activity clusters.

## Correlation Rule Fields Reference

### Top-Level Fields

| Field Name | Description | Expected Value | Required |
|------------|-------------|----------------|----------|
| `AnalysisType` | Indicates this is a correlation rule | `correlation_rule` | **Yes** |
| `Enabled` | Whether this correlation rule is enabled | Boolean | **Yes** |
| `RuleID` | The unique identifier of the rule | String | **Yes** |
| `Severity` | Which severity an associated alert should have | One of: `Info`, `Low`, `Medium`, `High`, or `Critical` | **Yes** |
| `Detection` | Correlation rule definition including sequence or group | See Detection fields | **Yes** |
| `CreateAlert` | Whether the correlation rule should create an alert (default: true) | Boolean | No |
| `Description` | A brief description of the rule | String | No |
| `DisplayName` | A user-friendly name to show in the Panther Console and alerts | String | No |
| `OutputIds` | Static destination overrides for alert routing | List of strings | No |
| `Reference` | The reason this rule exists, often a link to documentation | String | No |
| `Reports` | A mapping of framework or report names to values this rule covers | Map of strings to list of strings | No |
| `Runbook` | The actions to be carried out if this rule returns an alert | String | No |
| `SummaryAttributes` | A list of fields that alerts should summarize | List of strings | No |
| `Tags` | Tags used to categorize this rule | List of strings | No |
| `Tests` | Unit tests for this rule | List of test objects | No |

### Detection Fields

| Field Name | Description | Expected Value | Required |
|------------|-------------|----------------|----------|
| `Schedule` | The scheduling of a correlation rule | Schedule object | **Yes** |
| `EventEvaluationOrder` | Order to analyze events | `Chronological` (default) or `ReverseChronological` | No |
| `LookbackWindowMinutes` | How many minutes in the past to look | 15 ≤ x ≤ 21600 (15 days), default: 15 | No |
| `Group` | List of rule references for grouping (use Group OR Sequence) | List of 2-50 rule references | **One of Group/Sequence** |
| `Sequence` | List of rule references for sequencing (use Group OR Sequence) | List of 2-50 rule references | **One of Group/Sequence** |
| `MinMatchCount` | Minimum rules that must match (Group only) | 2 ≤ x < Group size | No |
| `MatchCriteria` | Event field matching for groups | List of match criteria | No |
| `Transitions` | Requirements to move between sequence steps | List of transitions | No |

### Schedule Fields

| Field Name | Description | Expected Value | Required |
|------------|-------------|----------------|----------|
| `CronExpression` | Cron expression for scheduling (use CronExpression OR RateMinutes) | Valid cron string | **One of** |
| `RateMinutes` | Rate in minutes for scheduling (use CronExpression OR RateMinutes) | x ≥ 2 | **One of** |
| `TimeoutMinutes` | Maximum execution time | x ≤ RateMinutes | No |

## Example Correlation Rule Templates

### Example 1: Brute Force Attack Detection (Sequence)

Detects failed login attempts followed by successful login from different IP addresses:

```yaml
AnalysisType: correlation_rule
Enabled: true
RuleID: Correlation.BruteForce.CrossIP.Login
Severity: High
DisplayName: Brute Force Attack Across Multiple IPs
Description: Detects multiple failed login attempts followed by successful login from different source IPs, indicating potential credential stuffing or brute force attack
Detection:
  Schedule:
    RateMinutes: 5
    TimeoutMinutes: 3
  LookbackWindowMinutes: 60
  EventEvaluationOrder: Chronological
  Sequence:
    - ID: failed_logins
      RuleID: AWS.Console.Failed.Login
      MinMatchCount: 3
    - ID: successful_login  
      RuleID: AWS.Console.Successful.Login
      MinMatchCount: 1
  Transitions:
    - ID: failed_to_success
      From: failed_logins
      To: successful_login
      WithinTimeFrameMinutes: 30
      Match:
        - From: p_alert_context.username
          To: p_alert_context.username
Tags:
  - Brute Force
  - Credential Stuffing
  - MITRE ATT&CK
  - Authentication
Reports:
  MITRE ATT&CK:
    - TA0006:T1110.001
    - TA0006:T1110.003
Reference: https://attack.mitre.org/techniques/T1110/
Runbook: |
  1. Immediately investigate the affected user account
  2. Check if the successful login IP is known/authorized
  3. Review all activities performed after successful login
  4. Consider disabling the account if compromise is confirmed
  5. Force password reset and enable MFA
  6. Block suspicious source IPs if malicious
SummaryAttributes:
  - p_alert_context.username
  - p_alert_context.source_ip
  - p_alert_context.user_agent
Tests:
  - Name: Brute force sequence detected
    ExpectedResult: true
    RuleOutputs:
      - ID: failed_logins
        Matches:
          p_alert_context.username:
            john.doe@company.com: [0, 2, 4]
      - ID: successful_login
        Matches:
          p_alert_context.username:
            john.doe@company.com: [15]
  - Name: Failed logins only (no successful login)
    ExpectedResult: false
    RuleOutputs:
      - ID: failed_logins
        Matches:
          p_alert_context.username:
            jane.smith@company.com: [0, 2, 4]
```

### Example 2: Privilege Escalation Detection (Group)

Detects multiple privilege escalation indicators happening close together:

```yaml
AnalysisType: correlation_rule
Enabled: true
RuleID: Correlation.PrivEsc.Multiple.Indicators
Severity: Critical
DisplayName: Multiple Privilege Escalation Indicators
Description: Detects when multiple privilege escalation techniques are observed for the same user within a short timeframe
Detection:
  Schedule:
    RateMinutes: 10
  LookbackWindowMinutes: 120
  Group:
    - ID: policy_attach
      RuleID: AWS.IAM.Policy.Attached.To.User
    - ID: role_assume
      RuleID: AWS.IAM.Role.Assumed.By.User  
    - ID: group_addition
      RuleID: AWS.IAM.User.Added.To.Group
    - ID: sudo_usage
      RuleID: Linux.Sudo.Command.Executed
  MinMatchCount: 2
  MatchCriteria:
    username_match:
      - GroupID: policy_attach
        Match: p_alert_context.target_user
      - GroupID: role_assume
        Match: p_alert_context.user_name
      - GroupID: group_addition
        Match: p_alert_context.target_user
      - GroupID: sudo_usage
        Match: p_alert_context.username
Tags:
  - Privilege Escalation
  - MITRE ATT&CK
  - Critical Infrastructure
Reports:
  MITRE ATT&CK:
    - TA0004:T1078
    - TA0005:T1548
Reference: https://attack.mitre.org/tactics/TA0004/
Runbook: |
  1. IMMEDIATELY isolate the affected user account
  2. Review all recent activities for this user
  3. Check legitimacy of privilege changes
  4. Audit all systems the user accessed
  5. Reset credentials and revoke elevated permissions
  6. Investigate potential lateral movement
Tests:
  - Name: Multiple privilege escalation techniques
    ExpectedResult: true
    RuleOutputs:
      - ID: policy_attach
        Matches:
          p_alert_context.target_user:
            admin@company.com: [5]
      - ID: role_assume
        Matches:
          p_alert_context.user_name:
            admin@company.com: [10]
  - Name: Single privilege escalation (below threshold)
    ExpectedResult: false
    RuleOutputs:
      - ID: policy_attach
        Matches:
          p_alert_context.target_user:
            normaluser@company.com: [5]
```

## Key Concepts

### Quick Reference

* Groups: Detect when multiple alerts occur (any order) - use for related activities
* Sequences: Detect when alerts occur in specific order - use for attack chains
* MinMatchCount: For partial matches in groups (e.g., 2 of 5 rules)
* Transitions: Define timing and field matching between sequence steps
* MatchCriteria: Specify field matching across group members
* Absence: Detect when something DIDN'T happen
* Schedule: RateMinutes (≥2) or CronExpression
* LookbackWindowMinutes: 15-21600 (15 min to 15 days)

### Groups vs Sequences

- **Groups**: Detect when multiple different types of alerts occur (order doesn't matter)
* **Sequences**: Detect when alerts occur in a specific chronological order

### Event Evaluation Order  

- **Chronological**: Events analyzed from oldest to newest (default)
* **ReverseChronological**: Events analyzed from newest to oldest

### Match Criteria & Transitions

- **MatchCriteria** (Groups): Specify which event fields should match across different rule types
* **Transitions** (Sequences): Define how one step transitions to the next, including timing and field matching

### Scheduling

- **RateMinutes**: Simple interval scheduling (every X minutes)
* **CronExpression**: Complex scheduling using cron syntax
* **TimeoutMinutes**: Maximum execution time before cancellation

## Best Practices

### 1. **Choose the Right Pattern**

- Use **Groups** for related activities that can happen in any order
* Use **Sequences** for attack chains that follow specific steps
* Consider **MinMatchCount** for groups to reduce false positives

### 2. **Optimize Performance**

- Keep `LookbackWindowMinutes` as short as practical
* Use appropriate `RateMinutes` based on urgency vs performance
* Set reasonable `TimeoutMinutes` to prevent resource exhaustion

### 3. **Field Matching Strategy**

- Use `p_` prefixed fields for cross-log-type compatibility
* Match on stable identifiers (usernames, IPs, etc.)
* Validate field types are consistent across rules

### 4. **Testing Strategy**

- Test both positive and negative scenarios
* Use relative timestamps for maintainable tests
* Cover edge cases like partial matches

### 5. **Alert Tuning**

- Set appropriate severity based on attack impact
* Use `SummaryAttributes` for quick triage
* Provide detailed runbooks for response teams

## Common Correlation Patterns

### Lateral Movement Detection

```yaml
Sequence:
  - ID: initial_compromise
    RuleID: Phishing.Email.Clicked
  - ID: credential_access
    RuleID: Windows.Credential.Dumping
  - ID: lateral_movement
    RuleID: Windows.Admin.Share.Access
```

### Data Exfiltration Chain

```yaml
Sequence:
  - ID: data_access
    RuleID: Database.Suspicious.Query
  - ID: file_staging
    RuleID: File.Large.Archive.Created
  - ID: network_transfer
    RuleID: Network.Large.Upload.Detected
```

### Account Takeover Pattern

```yaml
Group:
  - RuleID: Password.Reset.Requested
  - RuleID: MFA.Device.Changed
  - RuleID: Login.From.New.Location
MinMatchCount: 2
```

## Workflow

1. **Identify the Attack Pattern**: Determine if you need a Group (unordered) or Sequence (ordered)
2. **Select Component Rules**: Choose existing rules that detect individual attack steps
3. **Define Matching Logic**: Specify how events should be correlated (by user, IP, etc.)
4. **Set Timing Constraints**: Configure lookback windows and transition timeframes
5. **Configure Scheduling**: Balance detection speed with system performance
6. **Test Thoroughly**: Create comprehensive test cases covering various scenarios
7. **Tune Alerting**: Adjust severity and add context for effective response

When writing correlation rules, always consider:
* The specific attack scenario you're detecting
* Performance impact of your correlation logic
* How to minimize false positives while maintaining detection coverage
* Clear documentation for response teams
